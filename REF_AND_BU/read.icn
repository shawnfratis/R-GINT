#procedure main()
#f := open("input.txt","rw") | stop("cannot open file ",fn)
#while line := read(f)
#write(line) 
#close(f)
#end

#procedure main()
#write(readline("input.txt",7)|"failed")
#end
#procedure readline(f,n)                         # return n'th #line of file f
#f := open(\f,"r") | fail                        # open file
#every  i := n & line := |read(f) \ n do i -:= 1  #  <== here
#close(f)
#if i = 0 then return line
#end

########################################################

#procedure main()
#s := "this is a string"
#s := open("input.txt","r") | fail                        
 # s ? {                               # Establish string scanning environment
   #   while not pos(0) do  {          # Test for end of string
    #      tab(many(' '))              # Skip past any blanks
     #     word := tab(upto(' ') | 0)  # the next word is up to the next blank -or- the end of the line
   #       write(word)                 # write the word
    #  }
  #}
#end

######################################################

procedure main()
write(readline("input.txt")|"failed")
end

procedure readline(f)

     s := open(f,"r") | fail                        
     #s := "Mon Dec 8"
     s ? write(Mdate() | "not a valid date")
 end
 # Define a matching function that returns
 # a string that matches a day month dayofmonth
 procedure Mdate()
 # Define some initial values
 static dates
 static days
 initial {
        days := ["Mon","Tue","Wed","Thr","Fri","Sat","Sun"]
        dates := ["Jan","Feb","Mar","Apr","May","Jun",
                  "Jul","Aug","Sep","Oct","Nov","Dec"]
 }
 every suspend   (retval <-  tab(match(!days)) ||     # Match a day
                             =" " ||                  # Followed by a blank
                             tab(match(!dates)) ||    # Followed by the month
                             =" " ||                  # Followed by a blank
                             matchdigits(2)           # Followed by at least 2 digits
                 ) &
                 (=" " | pos(0) ) &                   # Either a blank or the end of the string
                 retval                               # And finally return the string
 end
 # Matching function that returns a string of n digits
 procedure matchdigits(n)
     suspend (v := tab(many(&digits)) & *v <= n) & v
 end

############################################################



