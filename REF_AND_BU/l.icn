procedure mainq()
write(readline("input.txt",7)|"failed")
end
 
procedure readline(f,n)                         # return n'th line of file f
f := open(\f,"r") | fail                        # open file
every  i := n & line := |read(f) \ n do i -:= 1  #  <== here
close(f)
if i = 0 then return line
end

################################################################

procedure main() # remove lines
   removelines("input.txt",3,2) | stop("Failed to remove lines.")
end
 
procedure removelines(fn,start,skip)
 
   f := open(fn,"r") | fail                  # open to read
   every put(F := [],|read(f))               # file to list
   close(f)
 
   if *F < start-1+skip then fail
   every F[start - 1 + (1 to skip)] := &null # mark delete
   #every F[start - 1 + (1 to skip)]  # mark delete
 
   f := open(fn,"w") | fail                  # open to rewrite
   every write(\!F)                          # write non-nulls
   close(f)
   return                                    # done

end

#############################################################

link lists
 
procedure main()              
haystack := ["Zig","Zag","Wally","Ronald","Bush","Krusty","Charlie","Bush","Bozo"]  # the haystack
every needle := !["Bush","Washington"] do {                                         # the needles
 
   if i := lindex(haystack,needle) then {                                           # first occurrence 
      write("needle=",needle, " is at position ",i," in haystack.")                
 
      if i <:= last(lindex,[haystack,needle]) then                                  # last occurrence 
         write("needle=",needle, " is at last position ",i," in haystack.")         
      }
   else {
      write("needle=",needle, " is not in haystack.")
      runerr(500,needle)        # throw an error
      }
   }
 
end
 
procedure last(p,arglist)               #: return the last generation of p(arglist) or fail
local i
every i := p!arglist
return \i
end

procedure lindex(lst, x)		#: generate indices for items matching x
   local i
 
   every i := 1 to *lst do
      if lst[i] === x then suspend i
 
end